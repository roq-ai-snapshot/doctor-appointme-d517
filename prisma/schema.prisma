generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model appointment {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date_time           DateTime            @db.Timestamp(6)
  patient_id          String              @db.Uuid
  clinic_id           String              @db.Uuid
  doctor_id           String              @db.Uuid
  status              String              @db.VarChar(255)
  created_at          DateTime            @default(now()) @db.Timestamp(6)
  updated_at          DateTime            @default(now()) @db.Timestamp(6)
  clinic              clinic              @relation(fields: [clinic_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  healthcare_provider healthcare_provider @relation(fields: [doctor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user                user                @relation(fields: [patient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  medical_record      medical_record[]
}

model clinic {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description         String?               @db.VarChar(255)
  location            String?               @db.VarChar(255)
  opening_hours       String?               @db.VarChar(255)
  closing_hours       String?               @db.VarChar(255)
  name                String                @db.VarChar(255)
  created_at          DateTime              @default(now()) @db.Timestamp(6)
  updated_at          DateTime              @default(now()) @db.Timestamp(6)
  user_id             String                @db.Uuid
  tenant_id           String                @db.VarChar(255)
  appointment         appointment[]
  user                user                  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  healthcare_provider healthcare_provider[]
  insurance           insurance[]
}

model healthcare_provider {
  id             String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String           @db.VarChar(255)
  specialty      String           @db.VarChar(255)
  license_number String           @db.VarChar(255)
  clinic_id      String           @db.Uuid
  user_id        String           @db.Uuid
  created_at     DateTime         @default(now()) @db.Timestamp(6)
  updated_at     DateTime         @default(now()) @db.Timestamp(6)
  appointment    appointment[]
  clinic         clinic           @relation(fields: [clinic_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user           user             @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  medical_record medical_record[]
}

model insurance {
  id                  String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  insurance_provider  String   @db.VarChar(255)
  policy_number       String   @db.VarChar(255)
  coverage_start_date DateTime @db.Timestamp(6)
  coverage_end_date   DateTime @db.Timestamp(6)
  patient_id          String   @db.Uuid
  clinic_id           String   @db.Uuid
  created_at          DateTime @default(now()) @db.Timestamp(6)
  updated_at          DateTime @default(now()) @db.Timestamp(6)
  clinic              clinic   @relation(fields: [clinic_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user                user     @relation(fields: [patient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model medical_record {
  id                  String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  patient_id          String              @db.Uuid
  doctor_id           String              @db.Uuid
  diagnosis           String              @db.VarChar(255)
  treatment_plan      String              @db.VarChar(255)
  medical_history     String              @db.VarChar(255)
  appointment_id      String              @db.Uuid
  created_at          DateTime            @default(now()) @db.Timestamp(6)
  updated_at          DateTime            @default(now()) @db.Timestamp(6)
  appointment         appointment         @relation(fields: [appointment_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  healthcare_provider healthcare_provider @relation(fields: [doctor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user                user                @relation(fields: [patient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                  String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email               String                @unique @db.VarChar(255)
  firstName           String?               @db.VarChar(255)
  lastName            String?               @db.VarChar(255)
  roq_user_id         String                @db.VarChar(255)
  tenant_id           String                @db.VarChar(255)
  created_at          DateTime              @default(now()) @db.Timestamp(6)
  updated_at          DateTime              @default(now()) @db.Timestamp(6)
  appointment         appointment[]
  clinic              clinic[]
  healthcare_provider healthcare_provider[]
  insurance           insurance[]
  medical_record      medical_record[]
}
